"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[643],{5680:function(e,t,n){n.d(t,{xA:function(){return s},yg:function(){return g}});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(g,i(i({ref:t},s),{},{components:n})):a.createElement(g,i({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6152:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(9668),r=n(1367),o=(n(6540),n(5680)),i=["components"],l={id:"contributing",title:"Contributing Guide"},c=void 0,p={unversionedId:"contributing",id:"contributing",title:"Contributing Guide",description:"react-native-share uses semantic-release for creating new releases. Also, we follow the commit-lint specification with husky to handle our commit messages.",source:"@site/docs/contributing.mdx",sourceDirName:".",slug:"/contributing",permalink:"/react-native-share/docs/contributing",draft:!1,editUrl:"https://github.com/react-native-community/react-native-share/edit/master/website/docs/contributing.mdx",tags:[],version:"current",frontMatter:{id:"contributing",title:"Contributing Guide"}},s={},u=[{value:"Documentation",id:"documentation",level:2},{value:"Using the Example App",id:"using-the-example-app",level:2},{value:"Where is the package.json and node_modules?",id:"where-is-the-packagejson-and-node_modules",level:2}],m={toc:u},d="wrapper";function g(e){var t=e.components,n=(0,r.A)(e,i);return(0,o.yg)(d,(0,a.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"react-native-share")," uses ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/semantic-release/semantic-release"},(0,o.yg)("inlineCode",{parentName:"a"},"semantic-release"))," for creating new releases. Also, we follow the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/conventional-changelog/commitlint#readme"},(0,o.yg)("inlineCode",{parentName:"a"},"commit-lint"))," specification with ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/typicode/husky#readme"},(0,o.yg)("inlineCode",{parentName:"a"},"husky"))," to handle our commit messages."),(0,o.yg)("p",null,"So whenever a new commit arrives at the ",(0,o.yg)("inlineCode",{parentName:"p"},"master"),", if it's attending the ",(0,o.yg)("inlineCode",{parentName:"p"},"semantic-release")," config to release a newer version in just a few minutes a new release will be published to npm. \ud83d\ude80"),(0,o.yg)("h2",{id:"documentation"},"Documentation"),(0,o.yg)("p",null,"We use ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/facebook/docusaurus"},"Docusaurus")," to build our documentation. Everything you need to change the docs is located at ",(0,o.yg)("inlineCode",{parentName:"p"},"./website"),".\nYou just need to run a:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"yarn; yarn start\n")),(0,o.yg)("p",null,"And you will be able to run a local version of Docusaurus. Everytime a PR is merged on the ",(0,o.yg)("inlineCode",{parentName:"p"},"master")," branch, a new version of the docs will be published. So you just need to think about writing some cool ",(0,o.yg)("inlineCode",{parentName:"p"},".mdx"),"."),(0,o.yg)("h2",{id:"using-the-example-app"},"Using the Example App"),(0,o.yg)("p",null,"To run the example app, which is located at ",(0,o.yg)("inlineCode",{parentName:"p"},"./example"),", just run at the root project:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"yarn && cd example/ios && pod install && cd -\n")),(0,o.yg)("p",null,"And finally a ",(0,o.yg)("inlineCode",{parentName:"p"},"yarn start")," at the root folder."),(0,o.yg)("p",null,"After that, open the file ",(0,o.yg)("inlineCode",{parentName:"p"},"example/ios/example.xcworkspace")," with XCode or run a ",(0,o.yg)("inlineCode",{parentName:"p"},"yarn start:android")," to start the android simulator."),(0,o.yg)("h2",{id:"where-is-the-packagejson-and-node_modules"},"Where is the package.json and node_modules?"),(0,o.yg)("p",null,"We don't need a ",(0,o.yg)("inlineCode",{parentName:"p"},"package.json")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"node_modules")," because we are using a custom config with ",(0,o.yg)("inlineCode",{parentName:"p"},"react-native.config.js"),", that let us use easily the rootFolder of the project."),(0,o.yg)("p",null,"Also, we changed some native files like: ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/react-native-community/react-native-share/blob/56faa20d7ad30501056b89b24205f22c9efb93f3/example/ios/example/AppDelegate.m#L36"},(0,o.yg)("inlineCode",{parentName:"a"},"AppDelegate.M")),",\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/react-native-community/react-native-share/blob/56faa20d7ad30501056b89b24205f22c9efb93f3/example/android/app/src/main/java/com/example/MainApplication.java#L33"},(0,o.yg)("inlineCode",{parentName:"a"},"MainApplication.java"))," and\nother files. By doing this, we are able to use the root-version of react-native-share and react at ",(0,o.yg)("inlineCode",{parentName:"p"},"../../../"),"."),(0,o.yg)("p",null,"If you want to do something similar on your library, or other project I recommend looking at ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/react-native-community/datetimepicker"},"datetimepicker")," which was the base to apply this changes."))}g.isMDXComponent=!0}}]);