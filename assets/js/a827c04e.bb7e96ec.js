(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[663],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(h,o(o({ref:n},p),{},{components:t})):a.createElement(h,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1012:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),o=["components"],l={id:"share-is-package-installed",title:"Share.isPackageInstalled (Android only)"},s={unversionedId:"share-is-package-installed",id:"share-is-package-installed",isDocsHomePage:!1,title:"Share.isPackageInstalled (Android only)",description:"It's a simple method that check if a package-name is installed with the Intent on Android. Similar to Share.open and Share.single this method will return a Promise, which will be fulfilled when the native code successfully check for the application.",source:"@site/docs/share-package-installed.mdx",sourceDirName:".",slug:"/share-is-package-installed",permalink:"/react-native-share/docs/share-is-package-installed",editUrl:"https://github.com/react-native-community/react-native-share/edit/master/website/docs/share-package-installed.mdx",version:"current",frontMatter:{id:"share-is-package-installed",title:"Share.isPackageInstalled (Android only)"},sidebar:"someSidebar",previous:{title:"Share.shareSingle",permalink:"/react-native-share/docs/share-single"},next:{title:"UI Components",permalink:"/react-native-share/docs/ui-components"}},c=[],p={toc:c};function d(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It's a simple method that check if a ",(0,i.kt)("inlineCode",{parentName:"p"},"package-name")," is installed with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Intent")," on Android. Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"Share.open")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Share.single")," this method will return a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),", which will be fulfilled when the native code successfully check for the application."),(0,i.kt)("p",null,"Using a promise implementation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"Share.isPackageInstalled('com.instagram.android')\n  .then((response) => {\n    console.log(response);\n    // { isInstalled: true/false, message: 'Package is Installed' }\n  })\n  .catch((error) => {\n    console.log(error);\n    // { error }\n  });\n")),(0,i.kt)("p",null,"Or with ",(0,i.kt)("inlineCode",{parentName:"p"},"async/await"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const checkPackage = async () => {\n  const { isInstalled } = await Share.isPackageInstalled('com.instagram.android');\n}\n")),(0,i.kt)("p",null,"Keep in mind, that similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"Share.open")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Share.single")," it's a good idea using a ",(0,i.kt)("inlineCode",{parentName:"p"},"try/catch")," whenever a call to this method is requested."),(0,i.kt)("p",null,"For iOS you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Linking.canOpenURL(instagram://)")," where the ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," is the app scheme that you want to check. Also, note that calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"isPackageInstalled")," on iOS will return a ",(0,i.kt)("inlineCode",{parentName:"p"},"Error: Not implemented"),"."))}d.isMDXComponent=!0}}]);