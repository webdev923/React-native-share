"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[663],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4039:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"share-is-package-installed",title:"Share.isPackageInstalled (Android only)"},s=void 0,c={unversionedId:"share-is-package-installed",id:"share-is-package-installed",isDocsHomePage:!1,title:"Share.isPackageInstalled (Android only)",description:"It's a simple method that check if a package-name is installed with the Intent on Android. Similar to Share.open and Share.single this method will return a Promise, which will be fulfilled when the native code successfully check for the application.",source:"@site/docs/share-package-installed.mdx",sourceDirName:".",slug:"/share-is-package-installed",permalink:"/react-native-share/docs/share-is-package-installed",editUrl:"https://github.com/react-native-community/react-native-share/edit/master/website/docs/share-package-installed.mdx",tags:[],version:"current",frontMatter:{id:"share-is-package-installed",title:"Share.isPackageInstalled (Android only)"},sidebar:"someSidebar",previous:{title:"Share.shareSingle",permalink:"/react-native-share/docs/share-single"},next:{title:"UI Components",permalink:"/react-native-share/docs/ui-components"}},p=[],d={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It's a simple method that check if a ",(0,i.kt)("inlineCode",{parentName:"p"},"package-name")," is installed with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Intent")," on Android. Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"Share.open")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Share.single")," this method will return a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),", which will be fulfilled when the native code successfully check for the application."),(0,i.kt)("p",null,"Using a promise implementation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"Share.isPackageInstalled('com.instagram.android')\n  .then((response) => {\n    console.log(response);\n    // { isInstalled: true/false, message: 'Package is Installed' }\n  })\n  .catch((error) => {\n    console.log(error);\n    // { error }\n  });\n")),(0,i.kt)("p",null,"Or with ",(0,i.kt)("inlineCode",{parentName:"p"},"async/await"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const checkPackage = async () => {\n  const { isInstalled } = await Share.isPackageInstalled('com.instagram.android');\n}\n")),(0,i.kt)("p",null,"Don't forget to add queries for Android SDK >= 30. Check ",(0,i.kt)("a",{parentName:"p",href:"https://react-native-share.github.io/react-native-share/docs/install#adding-queries-for-the-android-necessary-for-sdk--30"},"package visibility on Android")),(0,i.kt)("p",null,"Keep in mind, that similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"Share.open")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Share.single")," it's a good idea using a ",(0,i.kt)("inlineCode",{parentName:"p"},"try/catch")," whenever a call to this method is requested."),(0,i.kt)("p",null,"For iOS you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Linking.canOpenURL(instagram://)")," where the ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," is the app scheme that you want to check. Also, note that calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"isPackageInstalled")," on iOS will return a ",(0,i.kt)("inlineCode",{parentName:"p"},"Error: Not implemented"),"."))}u.isMDXComponent=!0}}]);